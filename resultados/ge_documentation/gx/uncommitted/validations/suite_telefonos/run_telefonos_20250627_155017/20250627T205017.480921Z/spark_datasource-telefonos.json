{
  "id": null,
  "meta": {
    "active_batch_definition": {
      "batch_identifiers": {
        "dataframe": "<DATAFRAME>"
      },
      "data_asset_name": "telefonos",
      "data_connector_name": "fluent",
      "datasource_name": "spark_datasource"
    },
    "batch_markers": {
      "ge_load_time": "20250627T205017.531526Z"
    },
    "batch_parameters": {
      "dataframe": "<DATAFRAME>"
    },
    "batch_spec": {
      "batch_data": "SparkDataFrame"
    },
    "checkpoint_id": "4b81e088-a909-4f48-8c1e-c65c9f0d9465",
    "great_expectations_version": "1.5.0",
    "run_id": {
      "run_name": "run_telefonos_20250627_155017",
      "run_time": "2025-06-27T15:50:17.480921-05:00"
    },
    "validation_id": "8db158c8-a277-4cf9-9dbb-bd45660aa68f",
    "validation_time": "2025-06-27T20:50:17.480921+00:00"
  },
  "results": [
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 301, 362, 326, 382, 353, 325, 388, 393, 333, 339, 389, 349, 369, 308, 324, 306, 368, 327, 345, 313, 373, 309, 318, 366, 315, 397, 377, 354, 396, 322, 399, 329, 305, 395, 394, 341, 335, 359, 314, 303, 302, 348.",
        "id": "aa82debd-0763-4869-9e79-0e83beccd44e",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "regex": "^(301|362|326|382|353|325|388|393|333|339|389|349|369|308|324|306|368|327|345|313|373|309|318|366|315|397|377|354|396|322|399|329|305|395|394|341|335|359|314|303|302|348)"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 301, 362, 326, 382, 353, 325, 388, 393, 333, 339, 389, 349, 369, 308, 324, 306, 368, 327, 345, 313, 373, 309, 318, 366, 315, 397, 377, 354, 396, 322, 399, 329, 305, 395, 394, 341, 335, 359, 314, 303, 302, 348.",
          "name": "Expectativas de Referencia de Caracteres"
        },
        "type": "expect_column_values_to_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(rlike(telefono, '^(301|362|326|382|353|325|388|393|333|339|389|349|369|308|324|306|368|327|345|313|373|309|318|366|315|397|377|354|396|322|399|329|305|395|394|341|335|359|314|303|302|348)'))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` no sean nulos.",
        "id": "7ab9ebfa-4382-4fab-bc15-c0388bf84c95",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` no sean nulos.",
          "name": "Expectativas de Valores No Nulos"
        },
        "type": "expect_column_values_to_not_be_null"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(isNotNull(telefono)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
        "id": "05a2f004-5847-4466-baac-7c1715cdbbff",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "max_value": 10,
          "min_value": 1
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_be_between"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(and(>=(length(telefono), 1), <=(length(telefono), 10)))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
        "id": "b023f6a0-200f-4cea-93ee-9bab39913867",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "value": 10.0
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_equal"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(=(length(telefono), 10.0))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    }
  ],
  "statistics": {
    "evaluated_expectations": 4,
    "success_percent": 100.0,
    "successful_expectations": 4,
    "unsuccessful_expectations": 0
  },
  "success": true,
  "suite_name": "suite_telefonos",
  "suite_parameters": {}
}