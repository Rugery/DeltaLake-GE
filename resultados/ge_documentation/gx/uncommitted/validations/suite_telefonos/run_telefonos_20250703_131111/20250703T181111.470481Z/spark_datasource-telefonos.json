{
  "id": null,
  "meta": {
    "active_batch_definition": {
      "batch_identifiers": {
        "dataframe": "<DATAFRAME>"
      },
      "data_asset_name": "telefonos",
      "data_connector_name": "fluent",
      "datasource_name": "spark_datasource"
    },
    "batch_markers": {
      "ge_load_time": "20250703T181111.509566Z"
    },
    "batch_parameters": {
      "dataframe": "<DATAFRAME>"
    },
    "batch_spec": {
      "batch_data": "SparkDataFrame"
    },
    "checkpoint_id": "0f0f6843-8b85-4663-99b0-8e36eaa74df8",
    "great_expectations_version": "1.5.0",
    "run_id": {
      "run_name": "run_telefonos_20250703_131111",
      "run_time": "2025-07-03T13:11:11.470481-05:00"
    },
    "validation_id": "f22ca51e-ffa9-4817-a8c9-1fb7bfa3cdee",
    "validation_time": "2025-07-03T18:11:11.470481+00:00"
  },
  "results": [
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 373, 324, 325, 366, 306, 395, 382, 318, 354, 305, 369, 377, 326, 362, 349, 388, 353, 313, 359, 314, 308, 329, 397, 303, 333, 322, 339, 302, 309, 348, 335, 393, 315, 341, 389, 301, 394, 327, 345, 396, 399, 368.",
        "id": "52d7b564-0efb-4cc9-912c-ce2e509e2ce7",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "regex": "^(373|324|325|366|306|395|382|318|354|305|369|377|326|362|349|388|353|313|359|314|308|329|397|303|333|322|339|302|309|348|335|393|315|341|389|301|394|327|345|396|399|368)"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 373, 324, 325, 366, 306, 395, 382, 318, 354, 305, 369, 377, 326, 362, 349, 388, 353, 313, 359, 314, 308, 329, 397, 303, 333, 322, 339, 302, 309, 348, 335, 393, 315, 341, 389, 301, 394, 327, 345, 396, 399, 368.",
          "name": "Expectativas de Referencia de Caracteres"
        },
        "type": "expect_column_values_to_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(rlike(telefono, '^(373|324|325|366|306|395|382|318|354|305|369|377|326|362|349|388|353|313|359|314|308|329|397|303|333|322|339|302|309|348|335|393|315|341|389|301|394|327|345|396|399|368)'))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` no sean nulos.",
        "id": "4a0d4450-6540-46a1-96d6-9c3278c608cd",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` no sean nulos.",
          "name": "Expectativas de Valores No Nulos"
        },
        "type": "expect_column_values_to_not_be_null"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(isNotNull(telefono)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
        "id": "3d90cfbd-d05d-49ed-89e9-fdacd7047241",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "max_value": 10,
          "min_value": 1
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_be_between"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(and(>=(length(telefono), 1), <=(length(telefono), 10)))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
        "id": "67a38cd9-de7c-47b8-9e40-008fe18ce664",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "value": 10.0
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_equal"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(=(length(telefono), 10.0))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `id` sean \u00fanicos.",
        "id": "f1f0e479-b862-4519-a300-eee3881b82ad",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "id"
        },
        "meta": {
          "description": "Verifica que los valores de `id` sean \u00fanicos.",
          "name": "Expectativas valor \u00fanico"
        },
        "type": "expect_column_values_to_be_unique"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(<=(count(1) OVER (PARTITION BY id), 1)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    }
  ],
  "statistics": {
    "evaluated_expectations": 5,
    "success_percent": 100.0,
    "successful_expectations": 5,
    "unsuccessful_expectations": 0
  },
  "success": true,
  "suite_name": "suite_telefonos",
  "suite_parameters": {}
}