{
  "id": null,
  "meta": {
    "active_batch_definition": {
      "batch_identifiers": {
        "dataframe": "<DATAFRAME>"
      },
      "data_asset_name": "telefonos",
      "data_connector_name": "fluent",
      "datasource_name": "spark_datasource"
    },
    "batch_markers": {
      "ge_load_time": "20250627T204032.133009Z"
    },
    "batch_parameters": {
      "dataframe": "<DATAFRAME>"
    },
    "batch_spec": {
      "batch_data": "SparkDataFrame"
    },
    "checkpoint_id": "ca905f23-c6df-42e7-9823-6f1587ca0ce7",
    "great_expectations_version": "1.5.0",
    "run_id": {
      "run_name": "run_telefonos_20250627_154032",
      "run_time": "2025-06-27T15:40:32.097847-05:00"
    },
    "validation_id": "51b6c3e1-c169-4377-95ff-43f461e6c57b",
    "validation_time": "2025-06-27T20:40:32.097847+00:00"
  },
  "results": [
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 348, 368, 369, 335, 394, 366, 333, 382, 301, 305, 373, 345, 341, 377, 325, 327, 349, 393, 354, 324, 359, 309, 395, 313, 306, 303, 388, 302, 314, 397, 389, 399, 339, 353, 396, 308, 318, 362, 322, 315, 326, 329.",
        "id": "a708db4a-3527-4b32-97c0-858ccb2a7cc8",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "regex": "^(348|368|369|335|394|366|333|382|301|305|373|345|341|377|325|327|349|393|354|324|359|309|395|313|306|303|388|302|314|397|389|399|339|353|396|308|318|362|322|315|326|329)"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` comiencen con uno de los prefijos v\u00e1lidos: 348, 368, 369, 335, 394, 366, 333, 382, 301, 305, 373, 345, 341, 377, 325, 327, 349, 393, 354, 324, 359, 309, 395, 313, 306, 303, 388, 302, 314, 397, 389, 399, 339, 353, 396, 308, 318, 362, 322, 315, 326, 329.",
          "name": "Expectativas de Referencia de Caracteres"
        },
        "type": "expect_column_values_to_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(rlike(telefono, '^(348|368|369|335|394|366|333|382|301|305|373|345|341|377|325|327|349|393|354|324|359|309|395|313|306|303|388|302|314|397|389|399|339|353|396|308|318|362|322|315|326|329)'))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `telefono` no sean nulos.",
        "id": "522979ac-6db2-4b82-be87-1501731ce25a",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono"
        },
        "meta": {
          "description": "Verifica que los valores de `telefono` no sean nulos.",
          "name": "Expectativas de Valores No Nulos"
        },
        "type": "expect_column_values_to_not_be_null"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(isNotNull(telefono)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
        "id": "7299b323-ccae-479f-adc5-b231fc2777e2",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "max_value": 10,
          "min_value": 1
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` est\u00e9 entre 1 y 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_be_between"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(and(>=(length(telefono), 1), <=(length(telefono), 10)))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
        "id": "da1badc1-76f0-4570-8304-46ef53091752",
        "kwargs": {
          "batch_id": "spark_datasource-telefonos",
          "column": "telefono",
          "value": 10.0
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `telefono` sea exactamente 10.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_equal"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(telefono), !(=(length(telefono), 10.0))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    }
  ],
  "statistics": {
    "evaluated_expectations": 4,
    "success_percent": 100.0,
    "successful_expectations": 4,
    "unsuccessful_expectations": 0
  },
  "success": true,
  "suite_name": "suite_telefonos",
  "suite_parameters": {}
}