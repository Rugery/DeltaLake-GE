{
  "id": null,
  "meta": {
    "active_batch_definition": {
      "batch_identifiers": {
        "dataframe": "<DATAFRAME>"
      },
      "data_asset_name": "clientes",
      "data_connector_name": "fluent",
      "datasource_name": "spark_datasource"
    },
    "batch_markers": {
      "ge_load_time": "20250703T181044.017691Z"
    },
    "batch_parameters": {
      "dataframe": "<DATAFRAME>"
    },
    "batch_spec": {
      "batch_data": "SparkDataFrame"
    },
    "checkpoint_id": "7680f51e-2b65-4141-a90f-21ad6dc7fb19",
    "great_expectations_version": "1.5.0",
    "run_id": {
      "run_name": "run_clientes_20250703_131043",
      "run_time": "2025-07-03T13:10:43.903560-05:00"
    },
    "validation_id": "05605b75-7740-47f4-8d58-46b128addc1d",
    "validation_time": "2025-07-03T18:10:43.903560+00:00"
  },
  "results": [
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `email` comiencen con uno de los prefijos v\u00e1lidos: user.",
        "id": "b97d42cb-7b45-4573-aedb-139adc017bef",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "email",
          "regex": "^(user)"
        },
        "meta": {
          "description": "Verifica que los valores de `email` comiencen con uno de los prefijos v\u00e1lidos: user.",
          "name": "Expectativas de Referencia de Caracteres"
        },
        "type": "expect_column_values_to_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(email), !(rlike(email, '^(user)'))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `email` coincidan con el patr\u00f3n `^.*@.*\\.com$`.",
        "id": "990fd6fd-eddb-4e97-9116-797ebd31cc06",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "email",
          "regex": "^.*@.*\\.com$"
        },
        "meta": {
          "description": "Verifica que los valores de `email` coincidan con el patr\u00f3n `^.*@.*\\.com$`.",
          "name": "Expectativas de Valores con Patr\u00f3n"
        },
        "type": "expect_column_values_to_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(email), !(rlike(email, '^.*@.*\\\\.com$'))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `email` est\u00e9 entre 5 y 50.",
        "id": "2edbd63d-437b-43e0-86d6-dd82a1f04c3c",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "email",
          "max_value": 50,
          "min_value": 5
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `email` est\u00e9 entre 5 y 50.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_be_between"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(email), !(and(>=(length(email), 5), <=(length(email), 50)))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `email` no sean cadenas vac\u00edas.",
        "id": "e0befa63-e385-4527-b856-65108174ac15",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "email",
          "regex": "^$"
        },
        "meta": {
          "description": "Verifica que los valores de `email` no sean cadenas vac\u00edas.",
          "name": "Expectativa valores no vac\u00edos"
        },
        "type": "expect_column_values_to_not_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(email), !(!(rlike(email, '^$')))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `id_cliente` sean \u00fanicos.",
        "id": "40d012b2-7073-4c38-837b-42b2128de593",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "id_cliente"
        },
        "meta": {
          "description": "Verifica que los valores de `id_cliente` sean \u00fanicos.",
          "name": "Expectativas valor \u00fanico"
        },
        "type": "expect_column_values_to_be_unique"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(<=(count(1) OVER (PARTITION BY id_cliente), 1)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `id_cliente` no sean nulos.",
        "id": "0a2dc55e-6b18-4b7b-bd8a-e2cc0e619589",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "id_cliente"
        },
        "meta": {
          "description": "Verifica que los valores de `id_cliente` no sean nulos.",
          "name": "Expectativas de Valores No Nulos"
        },
        "type": "expect_column_values_to_not_be_null"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(isNotNull(id_cliente)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de la columna `cod_municipio` est\u00e9n en la lista de referencia.",
        "id": "ee64bbac-68e3-4611-8a58-a625ccc10aae",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "cod_municipio",
          "value_set": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ]
        },
        "meta": {
          "description": "Verifica que los valores de la columna `cod_municipio` est\u00e9n en la lista de referencia.",
          "name": "Expectativa Valores por referencia"
        },
        "type": "expect_column_values_to_be_in_set"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [
          {
            "count": 4,
            "value": 13
          },
          {
            "count": 3,
            "value": 14
          },
          {
            "count": 3,
            "value": 16
          },
          {
            "count": 3,
            "value": 17
          },
          {
            "count": 3,
            "value": 18
          },
          {
            "count": 2,
            "value": 11
          },
          {
            "count": 2,
            "value": 15
          },
          {
            "count": 1,
            "value": 10
          },
          {
            "count": 1,
            "value": 12
          },
          {
            "count": 1,
            "value": 19
          },
          {
            "count": 1,
            "value": 20
          }
        ],
        "partial_unexpected_list": [
          14,
          13,
          17,
          17,
          11,
          16,
          19,
          17,
          15,
          10,
          14,
          16,
          18,
          14,
          16,
          12,
          20,
          13,
          15,
          11
        ],
        "unexpected_count": 24,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(cod_municipio), !(in(cod_municipio, 1, 2, 3, 4, 5, 6, 7, 8, 9))))",
        "unexpected_list": [
          14,
          13,
          17,
          17,
          11,
          16,
          19,
          17,
          15,
          10,
          14,
          16,
          18,
          14,
          16,
          12,
          20,
          13,
          15,
          11,
          18,
          13,
          13,
          18
        ],
        "unexpected_percent": 48.0,
        "unexpected_percent_nonmissing": 48.0,
        "unexpected_percent_total": 48.0
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `cod_municipio` est\u00e9n entre 1 y 20.",
        "id": "7f7ef479-45a9-4195-bdcd-1d15d2b3e93a",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "cod_municipio",
          "max_value": 20.0,
          "min_value": 1.0
        },
        "meta": {
          "description": "Verifica que los valores de `cod_municipio` est\u00e9n entre 1 y 20.",
          "name": "Expectativas de Valores Entre"
        },
        "type": "expect_column_values_to_be_between"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(cod_municipio), !(and(>=(cod_municipio, 1.0), <=(cod_municipio, 20.0)))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `cod_municipio` no coincidan con el patr\u00f3n `.*\\s+.*`.",
        "id": "0db61d33-5f68-40cf-a0c8-7048aee4142b",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "cod_municipio",
          "regex": ".*\\s+.*"
        },
        "meta": {
          "description": "Verifica que los valores de `cod_municipio` no coincidan con el patr\u00f3n `.*\\s+.*`.",
          "name": "Expectativas de Valores No Coinciden con Patr\u00f3n"
        },
        "type": "expect_column_values_to_not_match_regex"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(cod_municipio), !(!(rlike(cod_municipio, '.*\\\\s+.*')))))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de la columna `ciudad` est\u00e9n en la lista de referencia.",
        "id": "953e176a-d97c-4fb1-a5d1-4071f1f4ab64",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "ciudad",
          "value_set": [
            "Ciudad1",
            "Ciudad2",
            "Ciudad3",
            "Ciudad4",
            "Ciudad5",
            "Ciudad6",
            "Ciudad7",
            "Ciudad8",
            "Ciudad9"
          ]
        },
        "meta": {
          "description": "Verifica que los valores de la columna `ciudad` est\u00e9n en la lista de referencia.",
          "name": "Expectativa Valores por referencia"
        },
        "type": "expect_column_values_to_be_in_set"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [
          {
            "count": 4,
            "value": "Ciudad13"
          },
          {
            "count": 3,
            "value": "Ciudad14"
          },
          {
            "count": 3,
            "value": "Ciudad16"
          },
          {
            "count": 3,
            "value": "Ciudad17"
          },
          {
            "count": 3,
            "value": "Ciudad18"
          },
          {
            "count": 2,
            "value": "Ciudad11"
          },
          {
            "count": 2,
            "value": "Ciudad15"
          },
          {
            "count": 1,
            "value": "Ciudad10"
          },
          {
            "count": 1,
            "value": "Ciudad12"
          },
          {
            "count": 1,
            "value": "Ciudad19"
          },
          {
            "count": 1,
            "value": "Ciudad20"
          }
        ],
        "partial_unexpected_list": [
          "Ciudad14",
          "Ciudad13",
          "Ciudad17",
          "Ciudad17",
          "Ciudad11",
          "Ciudad16",
          "Ciudad19",
          "Ciudad17",
          "Ciudad15",
          "Ciudad10",
          "Ciudad14",
          "Ciudad16",
          "Ciudad18",
          "Ciudad14",
          "Ciudad16",
          "Ciudad12",
          "Ciudad20",
          "Ciudad13",
          "Ciudad15",
          "Ciudad11"
        ],
        "unexpected_count": 24,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(ciudad), !(in(ciudad, 'Ciudad1', 'Ciudad2', 'Ciudad3', 'Ciudad4', 'Ciudad5', 'Ciudad6', 'Ciudad7', 'Ciudad8', 'Ciudad9'))))",
        "unexpected_list": [
          "Ciudad14",
          "Ciudad13",
          "Ciudad17",
          "Ciudad17",
          "Ciudad11",
          "Ciudad16",
          "Ciudad19",
          "Ciudad17",
          "Ciudad15",
          "Ciudad10",
          "Ciudad14",
          "Ciudad16",
          "Ciudad18",
          "Ciudad14",
          "Ciudad16",
          "Ciudad12",
          "Ciudad20",
          "Ciudad13",
          "Ciudad15",
          "Ciudad11",
          "Ciudad18",
          "Ciudad13",
          "Ciudad13",
          "Ciudad18"
        ],
        "unexpected_percent": 48.0,
        "unexpected_percent_nonmissing": 48.0,
        "unexpected_percent_total": 48.0
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de `ciudad` sean del tipo `StringType`.",
        "id": "50d038a8-f325-4c13-a490-fc6f0609284d",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "ciudad",
          "type_": "StringType"
        },
        "meta": {
          "description": "Verifica que los valores de `ciudad` sean del tipo `StringType`.",
          "name": "Expectativas de Valores de Tipo"
        },
        "type": "expect_column_values_to_be_of_type"
      },
      "meta": {},
      "result": {
        "observed_value": "StringType"
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la longitud de los valores de `ciudad` sea exactamente 8.",
        "id": "a0ae4299-c5a9-43a9-bc42-2a2c7db737d8",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "ciudad",
          "value": 8.0
        },
        "meta": {
          "description": "Verifica que la longitud de los valores de `ciudad` sea exactamente 8.",
          "name": "Expectativas de Longitud de Valores"
        },
        "type": "expect_column_value_lengths_to_equal"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [
          {
            "count": 5,
            "value": "Ciudad7"
          },
          {
            "count": 4,
            "value": "Ciudad4"
          },
          {
            "count": 4,
            "value": "Ciudad6"
          },
          {
            "count": 4,
            "value": "Ciudad8"
          },
          {
            "count": 2,
            "value": "Ciudad2"
          },
          {
            "count": 2,
            "value": "Ciudad3"
          },
          {
            "count": 2,
            "value": "Ciudad5"
          },
          {
            "count": 2,
            "value": "Ciudad9"
          },
          {
            "count": 1,
            "value": "Ciudad1"
          }
        ],
        "partial_unexpected_list": [
          "Ciudad8",
          "Ciudad5",
          "Ciudad9",
          "Ciudad8",
          "Ciudad3",
          "Ciudad4",
          "Ciudad2",
          "Ciudad8",
          "Ciudad8",
          "Ciudad7",
          "Ciudad7",
          "Ciudad6",
          "Ciudad4",
          "Ciudad4",
          "Ciudad5",
          "Ciudad6",
          "Ciudad6",
          "Ciudad9",
          "Ciudad4",
          "Ciudad3"
        ],
        "unexpected_count": 26,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(ciudad), !(=(length(ciudad), 8.0))))",
        "unexpected_list": [
          "Ciudad8",
          "Ciudad5",
          "Ciudad9",
          "Ciudad8",
          "Ciudad3",
          "Ciudad4",
          "Ciudad2",
          "Ciudad8",
          "Ciudad8",
          "Ciudad7",
          "Ciudad7",
          "Ciudad6",
          "Ciudad4",
          "Ciudad4",
          "Ciudad5",
          "Ciudad6",
          "Ciudad6",
          "Ciudad9",
          "Ciudad4",
          "Ciudad3",
          "Ciudad7",
          "Ciudad7",
          "Ciudad2",
          "Ciudad6",
          "Ciudad1",
          "Ciudad7"
        ],
        "unexpected_percent": 52.0,
        "unexpected_percent_nonmissing": 52.0,
        "unexpected_percent_total": 52.0
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que los valores de la columna `ciudad` no est\u00e9n en la lista de referencia.",
        "id": "0b8ca096-eae0-4ffc-9e87-6536fb47c498",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column": "ciudad",
          "value_set": [
            "Ciudad8",
            "Ciudad1"
          ]
        },
        "meta": {
          "description": "Verifica que los valores de la columna `ciudad` no est\u00e9n en la lista de referencia.",
          "name": "Expectativa Valores Distintos por Referencia"
        },
        "type": "expect_column_values_to_not_be_in_set"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [
          {
            "count": 4,
            "value": "Ciudad8"
          },
          {
            "count": 1,
            "value": "Ciudad1"
          }
        ],
        "partial_unexpected_list": [
          "Ciudad8",
          "Ciudad8",
          "Ciudad8",
          "Ciudad8",
          "Ciudad1"
        ],
        "unexpected_count": 5,
        "unexpected_index_query": "df.filter(F.expr(Column<'and(isNotNull(ciudad), !(!(in(ciudad, 'Ciudad8', 'Ciudad1')))))",
        "unexpected_list": [
          "Ciudad8",
          "Ciudad8",
          "Ciudad8",
          "Ciudad8",
          "Ciudad1"
        ],
        "unexpected_percent": 10.0,
        "unexpected_percent_nonmissing": 10.0,
        "unexpected_percent_total": 10.0
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que las combinaciones de columnas email, ciudad est\u00e9n en la lista de valores permitidos",
        "id": "947bd6b8-e1c1-4735-9abe-e4257c7af734",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "unexpected_rows_query": "\n    SELECT *\n    FROM {batch} AS t\n    WHERE concat_ws('|', email, ciudad) NOT IN ('user1@example.com|Ciudad15', 'user32@example.com|Ciudad2', 'user3@example.com|Ciudad3', 'user4@example.com|Ciudad4', 'user5@example.com|Ciudad5', 'user6@example.com|Ciudad6', 'user31@example.com|Ciudad7', 'user8@example.com|Ciudad8', 'user9@example.com|Ciudad9')"
        },
        "meta": {
          "description": "Verifica que las combinaciones de columnas email, ciudad est\u00e9n en la lista de valores permitidos",
          "name": "Validaci\u00f3n combinaciones m\u00faltiples con SQL"
        },
        "type": "unexpected_rows_expectation"
      },
      "meta": {},
      "result": {
        "details": {
          "unexpected_rows": [
            {
              "ciudad": "Ciudad8",
              "cod_municipio": 8,
              "email": "user37@example.com",
              "id_cliente": 37,
              "nombre": "Ana G\u00f3mez"
            },
            {
              "ciudad": "Ciudad14",
              "cod_municipio": 14,
              "email": "user38@example.com",
              "id_cliente": 38,
              "nombre": "Andr\u00e9s Villa"
            },
            {
              "ciudad": "Ciudad13",
              "cod_municipio": 13,
              "email": "user39@example.com",
              "id_cliente": 39,
              "nombre": "Luc\u00eda P\u00e9rez"
            },
            {
              "ciudad": "Ciudad5",
              "cod_municipio": 5,
              "email": "user40@example.com",
              "id_cliente": 40,
              "nombre": "Ana Villa"
            },
            {
              "ciudad": "Ciudad17",
              "cod_municipio": 17,
              "email": "user41@example.com",
              "id_cliente": 41,
              "nombre": "Pedro Mart\u00ednez"
            },
            {
              "ciudad": "Ciudad9",
              "cod_municipio": 9,
              "email": "user42@example.com",
              "id_cliente": 42,
              "nombre": "Pedro L\u00f3pez"
            },
            {
              "ciudad": "Ciudad8",
              "cod_municipio": 8,
              "email": "user43@example.com",
              "id_cliente": 43,
              "nombre": "Mar\u00eda Torres"
            },
            {
              "ciudad": "Ciudad17",
              "cod_municipio": 17,
              "email": "user44@example.com",
              "id_cliente": 44,
              "nombre": "Laura G\u00f3mez"
            },
            {
              "ciudad": "Ciudad11",
              "cod_municipio": 11,
              "email": "user45@example.com",
              "id_cliente": 45,
              "nombre": "Ana Ruiz"
            },
            {
              "ciudad": "Ciudad16",
              "cod_municipio": 16,
              "email": "user46@example.com",
              "id_cliente": 46,
              "nombre": "Sandra L\u00f3pez"
            },
            {
              "ciudad": "Ciudad3",
              "cod_municipio": 3,
              "email": "user47@example.com",
              "id_cliente": 47,
              "nombre": "Ana G\u00f3mez"
            },
            {
              "ciudad": "Ciudad19",
              "cod_municipio": 19,
              "email": "user48@example.com",
              "id_cliente": 48,
              "nombre": "Luc\u00eda M\u00e9ndez"
            },
            {
              "ciudad": "Ciudad4",
              "cod_municipio": 4,
              "email": "user49@example.com",
              "id_cliente": 49,
              "nombre": "Luc\u00eda D\u00edaz"
            },
            {
              "ciudad": "Ciudad17",
              "cod_municipio": 17,
              "email": "user50@example.com",
              "id_cliente": 50,
              "nombre": "Andr\u00e9s Villa"
            },
            {
              "ciudad": "Ciudad10",
              "cod_municipio": 10,
              "email": "user2@example.com",
              "id_cliente": 2,
              "nombre": "Sandra Torres"
            },
            {
              "ciudad": "Ciudad2",
              "cod_municipio": 2,
              "email": "user3@example.com",
              "id_cliente": 3,
              "nombre": "Sandra Ram\u00edrez"
            },
            {
              "ciudad": "Ciudad8",
              "cod_municipio": 8,
              "email": "user4@example.com",
              "id_cliente": 4,
              "nombre": "Mar\u00eda P\u00e9rez"
            },
            {
              "ciudad": "Ciudad14",
              "cod_municipio": 14,
              "email": "user5@example.com",
              "id_cliente": 5,
              "nombre": "Carlos Torres"
            },
            {
              "ciudad": "Ciudad16",
              "cod_municipio": 16,
              "email": "user6@example.com",
              "id_cliente": 6,
              "nombre": "Sandra P\u00e9rez"
            },
            {
              "ciudad": "Ciudad8",
              "cod_municipio": 8,
              "email": "user7@example.com",
              "id_cliente": 7,
              "nombre": "Luc\u00eda L\u00f3pez"
            },
            {
              "ciudad": "Ciudad7",
              "cod_municipio": 7,
              "email": "user8@example.com",
              "id_cliente": 8,
              "nombre": "Sandra G\u00f3mez"
            },
            {
              "ciudad": "Ciudad7",
              "cod_municipio": 7,
              "email": "user9@example.com",
              "id_cliente": 9,
              "nombre": "Andr\u00e9s P\u00e9rez"
            },
            {
              "ciudad": "Ciudad18",
              "cod_municipio": 18,
              "email": "user10@example.com",
              "id_cliente": 10,
              "nombre": "Pedro Ram\u00edrez"
            },
            {
              "ciudad": "Ciudad6",
              "cod_municipio": 6,
              "email": "user11@example.com",
              "id_cliente": 11,
              "nombre": "Luc\u00eda G\u00f3mez"
            },
            {
              "ciudad": "Ciudad4",
              "cod_municipio": 4,
              "email": "user12@example.com",
              "id_cliente": 12,
              "nombre": "Sandra Torres"
            },
            {
              "ciudad": "Ciudad14",
              "cod_municipio": 14,
              "email": "user13@example.com",
              "id_cliente": 13,
              "nombre": "Andr\u00e9s D\u00edaz"
            },
            {
              "ciudad": "Ciudad16",
              "cod_municipio": 16,
              "email": "user14@example.com",
              "id_cliente": 14,
              "nombre": "Jorge Ruiz"
            },
            {
              "ciudad": "Ciudad4",
              "cod_municipio": 4,
              "email": "user15@example.com",
              "id_cliente": 15,
              "nombre": "Andr\u00e9s G\u00f3mez"
            },
            {
              "ciudad": "Ciudad12",
              "cod_municipio": 12,
              "email": "user16@example.com",
              "id_cliente": 16,
              "nombre": "Luis D\u00edaz"
            },
            {
              "ciudad": "Ciudad5",
              "cod_municipio": 5,
              "email": "user17@example.com",
              "id_cliente": 17,
              "nombre": "Carlos G\u00f3mez"
            },
            {
              "ciudad": "Ciudad20",
              "cod_municipio": 20,
              "email": "user18@example.com",
              "id_cliente": 18,
              "nombre": "Luc\u00eda P\u00e9rez"
            },
            {
              "ciudad": "Ciudad13",
              "cod_municipio": 13,
              "email": "user19@example.com",
              "id_cliente": 19,
              "nombre": "Laura M\u00e9ndez"
            },
            {
              "ciudad": "Ciudad15",
              "cod_municipio": 15,
              "email": "user20@example.com",
              "id_cliente": 20,
              "nombre": "Laura Villa"
            },
            {
              "ciudad": "Ciudad11",
              "cod_municipio": 11,
              "email": "user21@example.com",
              "id_cliente": 21,
              "nombre": "Pedro P\u00e9rez"
            },
            {
              "ciudad": "Ciudad18",
              "cod_municipio": 18,
              "email": "user22@example.com",
              "id_cliente": 22,
              "nombre": "Laura Villa"
            },
            {
              "ciudad": "Ciudad6",
              "cod_municipio": 6,
              "email": "user23@example.com",
              "id_cliente": 23,
              "nombre": "Luc\u00eda Ruiz"
            },
            {
              "ciudad": "Ciudad6",
              "cod_municipio": 6,
              "email": "user24@example.com",
              "id_cliente": 24,
              "nombre": "Ana Mart\u00ednez"
            },
            {
              "ciudad": "Ciudad9",
              "cod_municipio": 9,
              "email": "user25@example.com",
              "id_cliente": 25,
              "nombre": "Luc\u00eda Ruiz"
            },
            {
              "ciudad": "Ciudad13",
              "cod_municipio": 13,
              "email": "user26@example.com",
              "id_cliente": 26,
              "nombre": "Laura P\u00e9rez"
            },
            {
              "ciudad": "Ciudad4",
              "cod_municipio": 4,
              "email": "user27@example.com",
              "id_cliente": 27,
              "nombre": "Luis P\u00e9rez"
            },
            {
              "ciudad": "Ciudad13",
              "cod_municipio": 13,
              "email": "user28@example.com",
              "id_cliente": 28,
              "nombre": "Pedro Torres"
            },
            {
              "ciudad": "Ciudad3",
              "cod_municipio": 3,
              "email": "user29@example.com",
              "id_cliente": 29,
              "nombre": "Laura D\u00edaz"
            },
            {
              "ciudad": "Ciudad7",
              "cod_municipio": 7,
              "email": "user30@example.com",
              "id_cliente": 30,
              "nombre": "Sandra D\u00edaz"
            },
            {
              "ciudad": "Ciudad6",
              "cod_municipio": 6,
              "email": "user33@example.com",
              "id_cliente": 33,
              "nombre": "Laura L\u00f3pez"
            },
            {
              "ciudad": "Ciudad1",
              "cod_municipio": 1,
              "email": "user34@example.com",
              "id_cliente": 34,
              "nombre": "Ana D\u00edaz"
            },
            {
              "ciudad": "Ciudad7",
              "cod_municipio": 7,
              "email": "user35@example.com",
              "id_cliente": 35,
              "nombre": "Andr\u00e9s Villa"
            },
            {
              "ciudad": "Ciudad18",
              "cod_municipio": 18,
              "email": "user36@example.com",
              "id_cliente": 36,
              "nombre": "Laura Villa"
            }
          ]
        },
        "observed_value": 47
      },
      "success": false
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que las columnas esperadas id_cliente, nombre, email, cod_municipio, ciudad existan en el DataFrame.",
        "id": "6659f3f1-ae64-4dc8-b2f0-b94afd36e7d6",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column_set": [
            "id_cliente",
            "nombre",
            "email",
            "cod_municipio",
            "ciudad"
          ]
        },
        "meta": {
          "description": "Verifica que las columnas esperadas id_cliente, nombre, email, cod_municipio, ciudad existan en el DataFrame.",
          "name": "Expectativas de Columnas Esperadas"
        },
        "type": "expect_table_columns_to_match_set"
      },
      "meta": {},
      "result": {
        "observed_value": [
          "id_cliente",
          "nombre",
          "email",
          "cod_municipio",
          "ciudad"
        ]
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la combinaci\u00f3n de columnas id_cliente, nombre sea \u00fanica en todas las filas.",
        "id": "c15cccf8-775b-4dde-b3d1-5c5b8a06c112",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "column_list": [
            "id_cliente",
            "nombre"
          ]
        },
        "meta": {
          "description": "Verifica que la combinaci\u00f3n de columnas id_cliente, nombre sea \u00fanica en todas las filas.",
          "name": "Combinaci\u00f3n \u00fanica de columnas"
        },
        "type": "expect_compound_columns_to_be_unique"
      },
      "meta": {},
      "result": {
        "element_count": 50,
        "missing_count": 0,
        "missing_percent": 0.0,
        "partial_unexpected_counts": [],
        "partial_unexpected_list": [],
        "unexpected_count": 0,
        "unexpected_index_query": "df.filter(F.expr(Column<'!(<=(count(1) OVER (PARTITION BY struct(id_cliente, nombre)), 1)))",
        "unexpected_list": [],
        "unexpected_percent": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "unexpected_percent_total": 0.0
      },
      "success": true
    },
    {
      "exception_info": {
        "exception_message": null,
        "exception_traceback": null,
        "raised_exception": false
      },
      "expectation_config": {
        "description": "Verifica que la cantidad de filas est\u00e9 entre 1 y 50.",
        "id": "6e193612-2962-4892-8624-b5a7e4b240db",
        "kwargs": {
          "batch_id": "spark_datasource-clientes",
          "max_value": 50,
          "min_value": 1
        },
        "meta": {
          "description": "Verifica que la cantidad de filas est\u00e9 entre 1 y 50.",
          "name": "Expectativas de Cantidad de Filas"
        },
        "type": "expect_table_row_count_to_be_between"
      },
      "meta": {},
      "result": {
        "observed_value": 50
      },
      "success": true
    }
  ],
  "statistics": {
    "evaluated_expectations": 17,
    "success_percent": 70.58823529411765,
    "successful_expectations": 12,
    "unsuccessful_expectations": 5
  },
  "success": false,
  "suite_name": "suite_clientes",
  "suite_parameters": {}
}